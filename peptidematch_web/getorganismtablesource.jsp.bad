<%@ page trimDirectiveWhitespaces="true" %>
<%@ page language="java" contentType="text/html; charset=ISO-8859-1" pageEncoding="ISO-8859-1" %>
<%@ page session="true" %>
<%@ page import="org.apache.solr.common.SolrDocumentList" %>
<%@ page import="java.util.ArrayList" %>
<%@ page import="java.util.HashMap" %>
<%@ page import="java.util.Iterator" %>
<%@ page import="org.apache.solr.common.SolrDocument" %>
<%@ page import="query.PeptidePhraseQuery" %>
<%@ page import="java.io.*" %>
<%@ page import="java.text.NumberFormat" %>
<%@ page import="java.net.*" %>
<%@ page import="java.io.*,java.util.*, javax.servlet.*" %>
<%@ page import="java.util.Arrays" %>
<%@ page import="javax.servlet.http.*" %>
<%@ page import="org.apache.commons.fileupload.*" %>
<%@ page import="org.apache.commons.fileupload.disk.*" %>
<%@ page import="org.apache.commons.fileupload.servlet.*" %>
<%@ page import="org.apache.commons.io.output.*" %>
<%@ page import="org.apache.commons.io.FilenameUtils" %>
<%@ page import="org.apache.lucene.*" %>
<%@ page import="org.apache.lucene.search.*" %>
<%@ page import="org.apache.lucene.index.*" %>
<%@ page import="org.apache.lucene.store.*" %>
<%@ page import="org.apache.lucene.document.*" %>
<%@ page import="org.apache.solr.*" %>
<%@ page import="query.PeptidePhraseQuery" %>
<%@ page import="query.TaxonomyTreeNode" %>
<%@ page import="org.apache.solr.common.SolrDocument" %>
<%@ page import="org.apache.solr.common.SolrDocumentList" %>
<%@ page import="org.json.*" %>

<%
	String peptide = request.getParameter("peptide");
        String organism_id = request.getParameter("organism_id");
	String numberFound=request.getParameter("numberfound");
	peptide = peptide.replaceAll("[^a-zA-Z]", "");
	PeptidePhraseQuery peptideQuery = new PeptidePhraseQuery();
	Map<String, Long> sortedHitOrganismsCount = new LinkedHashMap();
	HashMap idToNameMap = new HashMap();
	HashMap taxonToTaxonGroup = new HashMap();
	long totalOrganismMatches = 0;
	long totalOrganismGroups = 0;
        if(peptide.length() >= 3) {
		
		if(session.getAttribute("taxToTaxGroup") == null) {
        		try {
                		InputStream inputStream = this.getClass().getClassLoader().getResourceAsStream("config/taxToTaxGroup.txt");
                		BufferedReader br = new BufferedReader(new InputStreamReader(inputStream));
                		String strLine;
                		while((strLine = br.readLine())!= null) {
                        		String[] rec = strLine.split("\t");
					if(rec.length() == 4) {
                        			taxonToTaxonGroup.put(rec[0], rec[2]+"\t"+rec[3]);
					}
					else {
                        			taxonToTaxonGroup.put(rec[0], "\t");
					}
                		}
                		inputStream.close();
                		br.close();
                		session.setAttribute("taxToTaxGroup", taxonToTaxonGroup);
        		}
        		catch(Exception e) {
                		e.printStackTrace();
       			}
		}
		else {
			taxonToTaxonGroup = session.getAttribute("taxToTaxGroup");
		}
		
		if(!organism_id.toLowerCase().equals("all")) {
			if(session.getAttribute("organismsCount-"+peptide+"-"+organism_id) == null) {
                        	sortedHitOrganismsCount = peptideQuery.queryByPeptideWithMultiOrganismWithGroup(peptide, organism_id);
                        	session.setAttribute("organismsCount-"+peptide+"-all", sortedHitOrganismsCount);
			}
			else {
				sortedHitOrganismsCount = (Map<String, Long>)session.getAttribute("organismsCount-"+peptide+"-"+organism_id);
			}
		}
		else {
			if(session.getAttribute("organismsCount-"+peptide+"-all") == null) {
                        	sortedHitOrganismsCount = peptideQuery.queryByPeptideWithGroup(peptide);
                        	session.setAttribute("organismsCount-"+peptide+"-all", sortedHitOrganismsCount);
                	}
			else {
				sortedHitOrganismsCount = (Map<String, Long>)session.getAttribute("organismsCount-"+peptide+"-all");
			}	
		}
		for(String org: sortedHitOrganismsCount.keySet()) {
                        if(org.equals("totalOrganismMatches")) {
				totalOrganismMatches = (Long)sortedHitOrganismsCount.get(org);
			}
			else if(org.equals("totalOrganismGroups")) {
				totalOrganismGroups = (Long)sortedHitOrganismsCount.get(org);
			}
                        else {
			        String[] rec = org.split("\\<\\|\\>");
                                String orgName = rec[0];
                                String orgId = rec[1];
				idToNameMap.put(orgId, orgName);
			}
		}
	}	
	else {
		out.println("The query peptide must be at least 3 characters");
	}
	String[] cols = {"Organism", "Matches", "Percent", "Taxonomic Group"};
	//String[] cols = {"Organism", "Matches", "Percent"};
	String table = "ajax";
	JSONObject result = new JSONObject();
	JSONArray array = new JSONArray();
	
	int amount = 25;
	int start = 0;
	int echo = 0;
	int col = 0;

	String organism = "";
	String matches = "";
	String percent = "";	
	String taxonGroup = "";
	String dir = "asc";
	String sStart = request.getParameter("iDisplayStart");
	String sAmount = request.getParameter("iDisplayLength");
	String sEcho = request.getParameter("sEcho");
	String sCol = request.getParameter("iSortCol_0");
	String sDir = request.getParameter("sSortDir_0");
	String sCol1 = request.getParameter("iSortCol_1");
	String sDir1 = request.getParameter("sSortDir_1");
	String search = request.getParameter("sSearch");
	organism = request.getParameter("sSearch_0");
	matches = request.getParameter("sSearch_1");
	percent = request.getParameter("sSearch_2");
	taxonGroup = request.getParameter("sSearch_3");
	
	if(sStart != null) {
		start = Integer.parseInt(sStart);
		if(start < 0) {
			start = 0;
		}
	}
	if(sAmount != null) {
		amount = Integer.parseInt(sAmount);
		if(amount < 25 || amount > 100) {
			amount = 25; 
		}
	}
	if(sEcho != null) {
		echo = Integer.parseInt(sEcho);
	}
	if(sCol != null) {
		col = Integer.parseInt(sCol);
		if(col < 0 || col > 3) {
			col = 0;
		}
	}
	if(sDir != null) {
		if(!sDir.equals("asc")) {
			dir = "desc";
		}
	}
	String colName = cols[col];
	int total = 0;
	int orgCount = 0;
	int totalAfterFilter = 0;
        NumberFormat nf = NumberFormat.getInstance();
        nf.setMinimumFractionDigits(1);
        nf.setMaximumFractionDigits(1);
	//int totalAfterFilter = totalOrganismGroups;

	Set<String> keys = null;
	if(sCol != null && sDir != null && sCol1!= null && sDir!= null&&  sCol.equals("1") && sDir.equals("desc") && sCol1.equals("0") && sDir1.equals("asc")) {
		keys = sortedHitOrganismsCount.keySet();
	}
	else {
		if(colName.equals("Matches") || colName.equals("Percent")) {
			if(dir.equals("asc")) {
				sortedHitOrganismsCount = sortByValueAsc(sortedHitOrganismsCount);
			}	
			if(dir.equals("desc")) {
				sortedHitOrganismsCount = sortByValueDesc(sortedHitOrganismsCount);
			}
			keys = sortedHitOrganismsCount.keySet();			
		}
		else {
			if(dir.equals("desc")) {
				keys = new TreeSet<String>(sortedHitOrganismsCount.keySet());
			}
			else {
				//keys = sortedHitOrganismsCount.keySet();
				keys = (new TreeSet<String>(sortedHitOrganismsCount.keySet())).descendingSet();
			}
		}
	}	
	//for(String org: sortedHitOrganismsCount.keySet()) {
	for(String org: keys) {
        	if(!org.equals("totalOrganismMatches") && !org.equals("totalOrganismGroups")) {
                	String[] rec = org.split("\\<\\|\\>");
                        String orgName = rec[0];
                        String orgId = rec[1];
			JSONArray ja = new JSONArray();
			String orgMatches = ((Long) sortedHitOrganismsCount.get(org)).toString();
			orgCount++;
			if(orgCount >= start && orgCount <= (start+amount)) {
			//if(orgCount <= (start+amount)) {
				total++;
				percent = nf.format(sortedHitOrganismsCount.get(org)*100.0/totalOrganismMatches);
				if(search != null && search.length() > 0) {
						//System.out.println("search1: " + search);
					if(orgName.toUpperCase().indexOf(search.toUpperCase()) != -1 || orgMatches.indexOf(search) != -1 || percent.indexOf(search) != -1) {
						//System.out.println("search2: " + search);
						String countUrl = "peptidewithtaxonid.jsp?initialed=false&start=0&rows=20&keyword="+peptide+"&organism_id="+organism_id+"&total_number="+numberFound+"&taxon_name="+orgName+"&taxon_id="+orgId;
                               			ja.put("<a href=\""+countUrl+"\">" +orgName+"</a>");
						ja.put(sortedHitOrganismsCount.get(org));
						ja.put(percent);
						
						String taxonGroupStr = (String)taxonToTaxonGroup.get(orgId);
						String taxonGroupNames = taxonGroupStr.split("\t");
						ja.put(taxonGroupNames[1]);
						
						array.put(ja);
						totalAfterFilter++;
					} 
				}
				else {
					String countUrl = "peptidewithtaxonid.jsp?initialed=false&start=0&rows=20&keyword="+peptide+"&organism_id="+organism_id+"&total_number="+numberFound+"&taxon_name="+orgName+"&taxon_id="+orgId;
                               		ja.put("<a href=\""+countUrl+"\">" +orgName+"</a>");
					ja.put(sortedHitOrganismsCount.get(org));
					ja.put(percent);
					
					String taxonGroupStr = (String)taxonToTaxonGroup.get(orgId);
					String taxonGroupNames = taxonGroupStr.split("\t");
					ja.put(taxonGroupNames[1]);
					
					array.put(ja);
				}
                        }
                }
	}
	result.put("sEcho", echo);
	if(totalAfterFilter > 0) {
		result.put("iTotalRecords", totalAfterFilter);
		result.put("iTotalDisplayRecords", totalAfterFilter);
	}
	else {
		result.put("iTotalRecords", totalOrganismGroups);
		result.put("iTotalDisplayRecords", totalOrganismGroups);
	}
	result.put("aaData", array);
	response.setContentType("application/json");
        response.setHeader("Cache-Control", "no-store");
        out.print(result);		
%>
<%!
	public Map<String, Long> sortByValueDesc(Map<String, Long> map) {
                List list = new LinkedList(map.entrySet());
                Collections.sort(list, new Comparator() {
                        //@Override
                        public int compare(Object o1, Object o2) {
                                if(((Map.Entry) (o2)).getValue() == ((Map.Entry) (o1)).getValue()) {
                                        return ((Comparable)((Map.Entry) (o2)).getKey()).compareTo(((Map.Entry)(o1)).getKey());
                                }
                                return ((Comparable) ((Map.Entry) (o2)).getValue()).compareTo(((Map.Entry) (o1)).getValue());
                        }
                });

                Map result = new LinkedHashMap();
                int count = 0;
                for (Iterator it = list.iterator(); it.hasNext();) {
                        Map.Entry entry = (Map.Entry) it.next();
                        result.put(entry.getKey(), entry.getValue());
                }
                return result;
        }
	public Map<String, Long> sortByValueAsc(Map<String, Long> map) {
                List list = new LinkedList(map.entrySet());
                Collections.sort(list, new Comparator() {
                        //@Override
                        public int compare(Object o1, Object o2) {
                                if(((Map.Entry) (o2)).getValue() == ((Map.Entry) (o1)).getValue()) {
                                        return ((Comparable)((Map.Entry) (o2)).getKey()).compareTo(((Map.Entry)(o1)).getKey());
                                }
                                return ((Comparable) ((Map.Entry) (o1)).getValue()).compareTo(((Map.Entry) (o2)).getValue());
                        }
                });

                Map result = new LinkedHashMap();
                int count = 0;
                for (Iterator it = list.iterator(); it.hasNext();) {
                        Map.Entry entry = (Map.Entry) it.next();
                        result.put(entry.getKey(), entry.getValue());
                }
                return result;
        }
%>
